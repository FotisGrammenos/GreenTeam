@page "/petreportlist"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using PetShop.Blazor.Shared;
@using PetShop.Model
@using System.Globalization

<PageTitle>Kahoots Pets - Pet Reports</PageTitle>

<h2>Pet Reports</h2>
<div class=row>

    <button class="btn btn-primary w-25" @onclick="AddItem">Create reports</button>

</div>
@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class=" table-responsive-md">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Year</th>
                    <th>Animal Type</th>
                    <th>Total Sold</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var month in petReportLists)
                {
                    <tr>
                        <td>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(int.Parse(month.Month))</td>
                        <td>@month.Year</td>
                        <td>@month.PetType</td>
                        <td>@month.TotalSold</td>
                        <td>
                            <div class="btn-group">

                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(month)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<PetReportViewModel> petReportLists = new();
    public PetReport currMonthlyPetReport { get; set; } = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        petReportLists = await httpClient.GetFromJsonAsync<List<PetReportViewModel>>("petreport");
    }

    async Task AddItem()
    {

        HttpResponseMessage response;
        currMonthlyPetReport.Month = DateTime.Now.Month.ToString();
        currMonthlyPetReport.Year = DateTime.Now.Year.ToString();
        if (!MonthlyPetReportExist(currMonthlyPetReport.Month, currMonthlyPetReport.Year))
        {
            response = await httpClient.PostAsJsonAsync("petReport", currMonthlyPetReport);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("petReport", currMonthlyPetReport);
        }
        response.EnsureSuccessStatusCode();
        await LoadItemsFromServer();
    }

    async Task DeleteItem(PetReportViewModel petReportList)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"petReport/{petReportList.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
    private bool MonthlyPetReportExist(string month,string year)
    {
        var findMonthlyPetReport = petReportLists.FirstOrDefault(searchMonth => searchMonth.Month == month && searchMonth.Year == year);
        if (findMonthlyPetReport == null)
            return false;
        return true;
    }

}

@page "/petFoodlist/edit/{Id:guid?}"
@using PetShop.Model
@inject HttpClient httpClient
@inject NavigationManager navManager

<PageTitle>Kahoots Pets - Food</PageTitle>

@if (PetFoodItem == null)
{
    <p>Loading ...</p>
}
else
{
    @if (Id == Guid.Empty)
    {
        <h2>Add new food</h2>
    }
    else
    {
        <h2>Edit @($"{Enum.GetName(typeof(AnimalType), PetFoodItem.AnimalType).ToLower()}'s food")</h2>
    }
    @if (ShowingErrorMessages)
    {
        <div class="row">
            <div class="alert alert-info" role="alert">
                <p>There was an error with the input fields.</p>
                <p>Please make sure that you have enter all the values correctly.</p>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-6">
            <label for="petfood-type">Type</label>
            <select name="petfood-type" class="form-select" @bind="PetFoodType">
                <option value="-1">Select Pet Food Type</option>
                @foreach (var item in Enum.GetValues(typeof(AnimalType)))
                {
                    <option value="@((int)item)">@item.ToString()</option>
                }
            </select>
        </div>
    </div>
    <div class="row mt-1">
        <div class="col-md-6">
            <label for="form-label">Cost</label>
            <input type="number" class="form-control" @bind="@PetFoodItem.Cost" placeholder="Pet Food Cost" min="0"/>
        </div>
        <div class="col-md-6">
            <label for="pet-label">Price</label>
            <input type="number" class="form-control" @bind="@PetFoodItem.Price" placeholder="Pet Food Price" min="0"/>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>

}
@code {
    [Parameter] public Guid? Id { get; set; }
    PetFoodListViewModel PetFoodItem { get; set; }
    private int PetFoodType { get; set; } = -1;
    private bool ShowingErrorMessages = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Id = Guid.Empty;
        }

        PetFoodItem = await httpClient.GetFromJsonAsync<PetFoodListViewModel>($"PetFood/{Id}");

        if(Id != null)
        {
            PetFoodType = (int)PetFoodItem.AnimalType;
        }
    }

    protected async Task OnSave()
    {
        if (PetFoodType == -1 ||
            PetFoodItem.Price <= 0 ||
            PetFoodItem.Cost <= 0)
        {
            ShowingErrorMessages = true;
            return;
        }
        ShowingErrorMessages = false;

        HttpResponseMessage response;
        PetFoodItem.AnimalType = (AnimalType)PetFoodType;
        if (Id == Guid.Empty)
        {
            response = await httpClient.PostAsJsonAsync("petFood", PetFoodItem);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("petFood", PetFoodItem);
        }
        response.EnsureSuccessStatusCode();
        navManager.NavigateTo("petFoodlist");
    }
    
    protected void OnCancel()
    {
        navManager.NavigateTo("petFoodlist");
    }
}

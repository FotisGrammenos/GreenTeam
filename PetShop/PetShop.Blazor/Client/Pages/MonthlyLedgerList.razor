@page "/monthlyledgerlist"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using PetShop.Blazor.Shared;
@using PetShop.Model
@using System.Globalization

<PageTitle>Kahoots Pets - Monthly Ledgers</PageTitle>

<h3>Monthly Ledgers</h3>
<div class=row>
 
<button class="btn btn-primary w-25" @onclick="AddItem" >Create Ledger</button>

</div>
@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class=" table-responsive-md">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Year</th>
                    <th>Income</th>
                    <th>Expenses</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var month in monthlyLedgerLists)
                {
                    <tr>
                        <td>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(int.Parse(month.Month))</td>
                        <td>@month.Year</td>
                        <td>@month.Income</td>
                        <td>@month.Expenses</td>
                        <td>@month.Total</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    List<MonthlyLedgerListViewMondel> monthlyLedgerLists=new();
    MonthlyLedger currMonthlyLedger { get; set; } = new();
    bool isLoading = true;
   
    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        monthlyLedgerLists = await httpClient.GetFromJsonAsync<List<MonthlyLedgerListViewMondel>>("monthlyledger");
    }

    async Task AddItem()
    {
        HttpResponseMessage response;
        currMonthlyLedger.Month = DateTime.Now.Month.ToString();
        currMonthlyLedger.Year = DateTime.Now.Year.ToString();
        if (!MonthlyLedgerExist(currMonthlyLedger.Month,currMonthlyLedger.Year))
        {
            response = await httpClient.PostAsJsonAsync("monthlyLedger", currMonthlyLedger);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("monthlyLedger", currMonthlyLedger);
        }
        response.EnsureSuccessStatusCode();
        await LoadItemsFromServer();
    }

    async Task DeleteItem(MonthlyLedgerListViewMondel monthlyLedger)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"monthlyLedger/{monthlyLedger.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

    private bool MonthlyLedgerExist(string month, string year)
    {
        var findMonthlyLedger = monthlyLedgerLists.SingleOrDefault(searchMonth => searchMonth.Month == month && searchMonth.Year == year);
        if (findMonthlyLedger == null)
            return false;
        return true;
    }

}

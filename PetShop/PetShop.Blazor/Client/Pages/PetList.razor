@page "/petlist"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using PetShop.Blazor.Shared;
@using PetShop.Model

<h3>Pet List</h3>

<div class="row">
    <button class="btn btn-primary w-50 mx-auto" @onclick="AddItem">Add</button>
</div>
@if (isLoading)
{
    <p> Loading...</p>
}
else
{
    <div class=" table-responsive-md">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Breed</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Cost</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pet in petList)
                {
                    <tr>
                        <td>@pet.Breed</td>
                        <td>@pet.Type</td>
                        <td>@pet.Status</td>
                        <td>@pet.Cost</td>
                        <td>@pet.Price</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-warning btn-sm" @onclick="() => EditItem(pet)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(pet)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<PetListViewModel> petList = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        petList = await httpClient.GetFromJsonAsync<List<PetListViewModel>>("pet");
    }

    async Task AddItem()
    {
        navManager.NavigateTo("/petlist/edit");
    }

    async Task DeleteItem(PetListViewModel pet)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"pet/{pet.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

    async Task EditItem(PetListViewModel pet)
    {
        navManager.NavigateTo($"/petlist/edit/{pet.Id}");
    }

}

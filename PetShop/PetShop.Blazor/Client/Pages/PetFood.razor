@page "/petFoodlist"
@using PetShop.Model
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using PetShop.Blazor.Shared;

<h3>PetFood</h3>

<div class="row">
<input @bind=NewPetFoodType placeholder="Insert PetFood's type..."/>
<input type="number" @bind=NewPetFoodCost placeholder="Insert PetFood's cost..."/>
<input type="number" @bind=NewPetFoodPrice placeholder="Insert PetFood's price..."/>
</div>
<button class="btn btn-primary" @onclick="AddItem" >Add</button>


@if (isLoading)
{
    <p>Loading ...</p>
}
else{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>AnimalType</th>
                <th>Cost</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var petfood in petFoodLists)
            {
                <tr>
                    <td><input value="@petfood.AnimalType" readonly/></td>
                    <td><input value="@petfood.Cost"readonly/></td>
                    <td><input value="@petfood.Price"readonly/></td>
                    <td><button class="btn btn-danger" @onclick="() => DeleteItem(petfood)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private AnimalType NewPetFoodType { get; set; }
    private string NewPetFoodCost { get; set; }
    private string NewPetFoodPrice { get; set; }

    List<PetFoodListViewModel> petFoodLists = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        petFoodLists= await httpClient.GetFromJsonAsync<List<PetFoodListViewModel>>("petFood");
    }

    async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(NewPetFoodCost) ||
        string.IsNullOrWhiteSpace(NewPetFoodPrice))
            return;

        var newCurrent = new PetFoodListViewModel()
        {
            AnimalType= NewPetFoodType,
            Cost=int.Parse(NewPetFoodCost),
            Price=int.Parse(NewPetFoodPrice)
        };
        //NewPetFoodType = null;
        NewPetFoodCost = null;
        NewPetFoodPrice = null;

       var tmp = await httpClient.PostAsJsonAsync("petFood", newCurrent); 
        await LoadItemsFromServer();
    }


     async Task DeleteItem(PetFoodListViewModel itemToDelete)
    {
         var response = await httpClient.DeleteAsync($"petFood/{itemToDelete.Id}");
         response.EnsureSuccessStatusCode();
         await LoadItemsFromServer();
    }

}

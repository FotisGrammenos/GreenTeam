@page "/petFoodlist"
@using PetShop.Model
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using PetShop.Blazor.Shared;
@inject NavigationManager navigationManager

<PageTitle>Kahoots Pets - Foods</PageTitle>

<h3>Foods</h3>

<div class=row>

    <button class="btn btn-primary w-25" @onclick="AddItem">Add</button>

</div>
@if (isLoading)
{
    <p>Loading ...</p>
}
else
{
    <div class="table-responsive-md">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Type of Animal</th>
                    <th>Cost</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var petfood in petFoodLists)
                {
                    <tr>
                        <td>@petfood.AnimalType</td>
                        <td>@petfood.Cost</td>
                        <td>@petfood.Price</td>
                        <td>
                            <button class="btn btn-warning text-primary" @onclick="() => EditItem(petfood)">Edit</button>
                            <button class="btn btn-danger text-primary" @onclick="() => DeleteItem(petfood)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {


    List<PetFoodListViewModel> petFoodLists = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        petFoodLists = await httpClient.GetFromJsonAsync<List<PetFoodListViewModel>>("petFood");
    }

    async Task AddItem()
    {
        navigationManager.NavigateTo("/petFoodlist/edit");
    }


    async Task DeleteItem(PetFoodListViewModel itemToDelete)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"petFood/{itemToDelete.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

    async Task EditItem(PetFoodListViewModel petFood)
    {
        navigationManager.NavigateTo($"/petFoodlist/edit/{petFood.Id}");
    }
}

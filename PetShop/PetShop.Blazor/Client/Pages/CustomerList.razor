@page "/customerlist"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using PetShop.Blazor.Shared;

<h3>CustomerList </h3>
<div class="row">
<input @bind=NewCustomerName placeholder="New customer..."/>
<input @bind=NewCustomerSurname placeholder="New customer..."/>
<input @bind=NewCustomerPhone placeholder="New customer..."/>
<input @bind=NewCustomerTIN placeholder="New customer..."/>
</div>
<button class="btn btn-primary" @onclick="AddItem" >Add</button>
@if (isLoading)
{
    <p> Loading...</p>
}
else
{
   <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Phone</th>
                <th>TIN</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var customer in customerList)
            {
                <tr>
                    <td><input value="@customer.Name" @onchange="(e)=> TitleChanged(e, customer)"/></td>
                    <td><input value="@customer.Surname" @onchange="(e)=> TitleChanged(e, customer)"/></td>
                    <td><input value="@customer.Phone" @onchange="(e)=> TitleChanged(e, customer)"/></td>
                    <td><input value="@customer.TIN" @onchange="(e)=> TitleChanged(e, customer)"/></td>
                    <td><button class="btn btn-danger" @onclick="() => DeleteItem(customer)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table> 
}

@code {


    private string NewCustomerName { get; set; }
    private string NewCustomerSurname { get; set; }
    private string NewCustomerPhone { get; set; }
    private string NewCustomerTIN { get; set; }
    List<CustomerListViewModel> customerList = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        customerList = await httpClient.GetFromJsonAsync<List<CustomerListViewModel>>("customer");
    }

    async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(NewCustomerName)||
            string.IsNullOrWhiteSpace(NewCustomerSurname)||
            string.IsNullOrWhiteSpace(NewCustomerPhone)||
            string.IsNullOrWhiteSpace(NewCustomerTIN))
            return;

        var newCurrent = new CustomerListViewModel()
            {
                Name = NewCustomerName,
                Surname = NewCustomerSurname,
                Phone = NewCustomerPhone,
                TIN = NewCustomerTIN
            };
        NewCustomerName = null;
        NewCustomerSurname = null;
        NewCustomerPhone = null;
        NewCustomerTIN = null;

        try { 
            var tmp = await httpClient.PostAsJsonAsync("customer", newCurrent); 
            }
        catch (Exception e)
        {
            Console.WriteLine(e);  
        }

        await LoadItemsFromServer();
        }

        async Task DeleteItem(CustomerListViewModel itemToDelete)
        {
            var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
            if (confirm)
            {
                var response = await httpClient.DeleteAsync($"customer/{itemToDelete.Id}");
                response.EnsureSuccessStatusCode();
                await LoadItemsFromServer();
            }
        }

        async Task TitleChanged(ChangeEventArgs e, CustomerListViewModel item)
        {
            item.Name = e.Value?.ToString();
            var response = await httpClient.PutAsJsonAsync("customer", item);
            response.EnsureSuccessStatusCode();
            //await LoadItemsFromServer();
        }

    
}
